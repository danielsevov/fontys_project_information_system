# This is a basic workflow to help you get started with Actions

name: Java CI with Maven

on: push

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dao_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 15
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 15.0.1
      - name: Add sebipom to settings.xml
        uses: whelk-io/maven-settings-xml-action@v14
        with:
          repositories: '[{ "id": "fontysvenlo.org", "url": "https://www.fontysvenlo.org/repository" }]'
          plugin_groups: '[ "org.sonarsource.scanner.maven" ]'
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Populate test database
        working-directory: implementation/Persistence/src/main/resources/integration_test_data
        env:
          PGPASSWORD: postgres
        run: chmod +x populate_test_db.sh && ./populate_test_db.sh

      - name: Build with Maven
        run: cd implementation && mvn -DCI=TRUE test --batch-mode --fail-at-end

      - name: Publish Test Report
        if: ${{ always() }}
        uses: scacap/action-surefire-report@v1

